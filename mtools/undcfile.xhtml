<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../styles/4pmtcomp.css"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de">
<head>
  <link rel="shortcut icon" href="../styles/4pmt.png" />
  <title>4 Pieces MTools</title>
</head>
<body>

<header>
  <div id="linksoben">antoinelegra.github.io</div>
  <div id="topthema">4 Pieces MTools</div>
</header>

<nav>
    <a href="../index.xhtml">Übersicht</a>
    <a href="mfb.xhtml">Find &amp; Backup</a>
    <a href="mcb.xhtml">Compare &amp; Backup</a>
    <a href="mkal.xhtml">Kalender mit Datenbank</a>
    <a href="mpa.xhtml">Bilderalbum</a>
</nav>

<article>
<h1>Die unit dateifuncs.pas</h1>

<p class="vorsatz">
  Diese Seiten auch auf <a href="https://github.com/AntoineLegra/antoinelegra.github.io">GitHub</a> ansehen.
</p>

<figure class="figlinks" style="width: 135px;">
  <a href="../styles/4pmt.png">
    <img src="../styles/4pmt.png" style="width: 100%;" />
  </a>
</figure>

<p class="initial">
  Basierend auf der Unit <code>t4a_trashcan.pas</code> von Hans Luijten, die auf <a href="https://www.tweaking4all.com/software-development/lazarus-development/lazarus-crossplatform-trashcan/">tweaking4all.com</a> zu finden ist, habe ich für das Kopieren und Löschen von Files eine ähnliche Unit namens <code>dateifuncs.pas</code> entwickelt
</p>

<p class="initial">
  Danke für die tolle Idee und Umsetzung, Hans!
</p>

<p class="initial">
  In meiner Unit konnte ich allerdings MacOS nicht berücksichtigen, da ich weder Zugriff auf derartige Hardware noch Erfahrungen in der Programmierung für MacOS habe.
</p>

<p class="initial">
  Ziel dieser Unit war es, einen einheitlichen Aufruf der Funktionen zu ermöglichen, um das Hauptprogramm von einigen <code>{$IFDEF … } … {$ELSE …} … {$ENDIF}</code> zu entlasten und es so lesbarer und einfacher zu gestalten. Der Quelltext dafür ist direkt auf GitHub zu finden, der Link steht oben.
</p>

<p class="initial">
  Die WinX-Version von MCmpBack verwendet für Copy und Delete bequemlichkeitshalber die Systemfunktion <code>SHFileOperationW</code>, die ja auch — falls genügend Zeit zur Verfügung steht — automatisch einen ProgressDialog anzeigen kann. Unter Linux muss man auf solche Beqeumlichkeit verzichten. Daher sind hier ein eigens programmierter ProgressDialog, der in die Unit eingebunden werden muss, und ein Unit-globaler Schalter nötig. Letzterer sorgt dafür, dass die jeweilige Funktion abgebrochen wird, bevor das nächste File bearbeitet werden kann.
</p>

<p class="initial">
  Auch dieser ProgressDialog ist im Quelltext auf GitHub zu finden. Bis heute wird für ihn allerdings das ›böse‹ <code>Application.ProcessMessages</code> verwendet, was ja immer eine etwas heikle Angelegenheit ist. Und tatsächlich hat mich diese Funktion — vielleicht nur im Zusammenspiel mit den verwendeten TVirtualStringTrees, vielleicht aber auch aus ganz anderen Gründen — vor einige Probleme gestellt, die ich aber Dank der Hilfe aus dem deutschen Lazarus-Forum lösen konnte. Symptom war, dass die ausgewählten Files im TVirtualStringTree während einer File-Operation hinter dem ProgressDialog verschwanden und damit nicht mehr alle Files kopiert oder gelöscht werden konnten. Das trat zuerst nur unter Linux auf, was mich auf eine völlig falsche Fährte lenkte. Die Lösung aus dem Forum war einfach: Die selektierten Files müssen zuerst in StringLists gesammelt werden, um dann die jeweilige Operation mit den StringLists durchzuführen.
</p>

<p class="initial">
  Erst viel später trat dasselbe Phänomen dann auch unter WinX auf — bei einer sehr langdauernden Kopieraktion mit sehr vielen Files auf einen sehr langsamen USB-Stick. WinX hat da anscheinend ein bisschen mehr Luft nach oben. Erst danach bin ich dann auf die Idee gekommen, zum Kopieren die entsprechende WinX-Funktion zu verwenden.
</p>

<p class="initial">
  Noch ein Wort zur eingebundenen <code>optionclass.pas</code>. In dieser Class bewahre ich globale Variablen und Konstanten in Form von Properties sowie einige kleinere Funktionen auf, die auch in anderen Forms meines jeweiligen Programmes benötigt werden. Für die File-Funktionen werden hier folgende Properties genutzt, die sich aber leicht ersetzen lassen.
</p>

<ul>
  <li><strong>optclass.MesgCopy</strong>: ist die Meldung, dass kopiert wird.</li>
  <li><strong>optclass.ErrMakeDir</strong>: ist die Fehlermeldung, dass das Erzeugen eines Ordners schief gelaufen ist.</li>
  <li><strong>optclass.AllowOverwriteWP</strong>: Boolean, der erlaubt, schreibgeschützte Files zu überschreiben — oder auch nicht.</li>
  <li><strong>optclass.MesgDelete</strong>: ist die Meldung, dass gelöscht wird.</li>
</ul>

<p class="initial">
  Ich hatte momentan keine Lust, das zu ändern, da ich dann mein Programm auch hätte ändern müssen — Programmierer sind bekanntlich faul ;-) Für eine spätere Version werde ich das dann aber erledigen. Als schlechtes Gegenbeispiel existieren im selben Quelltext zwei direkt angegebene String-Konstanten, die eigentlich auch in der OptionClass hätten stehen sollen …
</p>

<p class="initial">
  Für den Schreibschutz-Schalter gibt es aber keine elegantere Lösung, als ihn in der MainForm über die CheckBox zu setzen oder auszuschalten, gleichzeitig den Wert in der OptionClass zu speichern und dann in allen anderen Forms, wo es nötig ist, aus der OptionClass abfragen zu können.
</p>

</article>

<footer>
  <div id="lastchanged">
    Zuletzt geändert am:
    <br />
    <time>
      25. Juni 2020
    </time>
  </div>
</footer>

</body>
</html>
