<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../../styles/dm_comp.css"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de">
<head>
  <link rel="shortcut icon" href="../../../styles/deem.png" />
  <title>Computer &amp; Mehr</title>
</head>
<body>

<header>
  <div id="linksoben">dokcenter.deems.net</div>
  <div id="topthema">Computer &amp; Mehr</div>
</header>

<nav>
    <a href="../../../index.xhtml">History &amp; Science</a>
    <a href="../../../leben/index.xhtml">Leben &amp; Gesundheit</a>
    <a href="../../../buecher/index.xhtml">Bücher &amp; Texte</a>
    <a href="../../index.xhtml">Computer &amp; Mehr</a>
</nav>

<article>
<h1>Lazarus &amp; FreePascal</h1>

<div class="zweispalten">
<ul>
  <li><a href="https://wiki.freepascal.org/Lazarus_Documentation">Lazarus docs im Netz</a></li>
  <li><a href="https://www.lazarusforum.de">Lazarus-Forum deutsch</a></li>
  <li><a href="hidpi/laz_hidpi.pdf">Lazarus mit HiDPI</a></li>
  <li><a href="mtools.xhtml">Die MeisterTools</a></li>
  <li><a href="#laz_tut">Lazarus Tips &amp; Tricks</a></li>
</ul>
</div>

<h2 id="laz_tut">Lazarus Tips &amp; Tricks</h2>

<ul>
  <li><a href="#tree_size_sort">Dateilängen in TreeViews sortieren</a></li>
  <li><a href="#hidpi_fonts">Bei HiDPI: auf die Fonts achten</a></li>
</ul>

<h2 id="tree_size_sort">Dateilängen in TreeViews sortieren</h2>

<p class="vorsatz">
  Deems, vom 2017 08 12.
</p>

<p class="initial">
  Da ein TListView auch in der heutigen Lazarus/FreePascal Version 1.6.4/3.0.2 noch keine CustomSort-Procedure hat, mein MFBwin aber die Dateilängen falsch sortiert, wenn man auf den Spalten-Header der Dateilängen klickt, ist mir heute ein ganz einfacher Trick eingefallen.
</p>

<p class="initial">
  Die Dateilängen stehen als mit Tausender-Separator formatierte Strings zur Verfügung. Da aber Strings immer von vorne sortiert werden, steht eine Dateilänge von beispielsweise 301 vor einer 401, vor einer 4.001, aber auch vor einer 40 …
</p>

<p class="initial">
  Pimpt man nun den String auf eine einheitliche Länge von — sagen wir — 20 Zeichen, bei dem String 301 also 17 Leerzeichen plus die drei Zeichen, dann klappt plötzlich die Standard-Sortierung auch ohne alle weiteren Tricks.
</p>

<p class="initial">
  Hier der Ausschnitt:
</p>

<div class="anmerkung"><p>
   <code>// benutzt den DefaultFormatSettings.ThousandSeparator<br />
    // da es kein CustomSort gibt, den String vorne mit<br />
    // Leerzeichen auffüllen, so dass alle gleich lang sind<br />
    // dann klappt auch die Sortierung automatisch<br />
    <br />
    sErg := FloatToStrF(suchRec.Size, ffNumber, 10, 0); // Länge in String format<br />
    iGroesse := length(sErg);                           // Stringlänge holen<br />
    <br />
    // und und nach vorne mit Leerzeichen auffüllen<br />
    // so dass alle Strings gleich lang sind<br />
    <br />
    sGroesse := LeftStr(LeerString, 20 - iGroesse) + sErg;<br />
    lItem.SubItems.Add(sGroesse);</code><br />
</p></div>

<p class="initial">
  Bei der Sortierung der Datums-/Zeit-Spalte funktionierte das übrigens von Anfang an problemlos, zum einen, weil diese Strings von Hause alle gleich lang sind, zum anderen, weil ich von Anfang an das Jahr zuerst, dann den Monat usw. formatiert hatte.
</p>

<h2 id="hidpi_fonts">Bei HiDPI: auf die Fonts achten</h2>

<p class="initial">
  If you are setting dimensions in code then you need to scale them by Screen.PixelsPerInch divided by Form.PixelsPerInch. Use MulDiv to do this.
</p>

<div class="anmerkung"><pre>
function TMyForm.ScaleDimension(const X: Integer): Integer;
begin
  Result := MulDiv(X, Screen.PixelsPerInch, PixelsPerInch);
end;
</pre></div>

<p class="initial">
  This is what the form persistence framework does when Scaled is True. In fact, you can make a cogent argument for replacing this function with a version that hard codes a value of 96 for the denominator. This allows you to use absolute dimension values and not worry about the meaning changing if you happen to change font scaling on your development machine and re-save the .dfm file. The reason that matters is that the PixelsPerInch property stored in the .dfm file is the value of the machine on which the .dfm file was last saved.
</p>

<div class="anmerkung"><pre>
const
  SmallFontsPixelsPerInch = 96;

function ScaleFromSmallFontsDimension(const X: Integer): Integer;
begin
  Result := MulDiv(X, Screen.PixelsPerInch, SmallFontsPixelsPerInch);
end;
</pre></div>

<p class="initial">
  So, continuing the theme, another thing to be wary of is that if your project is developed on multiple machines with different DPI values, you will find that the scaling that Delphi uses when saving .dfm files results in controls wandering over a series of edits. At my place of work, to avoid this, we have a strict policy that forms are only ever edited at 96dpi (100% scaling).
</p>

<p class="initial">
  In fact my version of <code>ScaleFromSmallFontsDimension</code> also makes allowance for the possibility of the form font differing at runtime from that set at designtime. On XP machines my application’s forms use 8pt Tahoma. On Vista and up 9pt Segoe UI is used. This provides yet another degree of freedom. The scaling must account for this because the absolute dimension values used in the source code are assumed to be relative to the baseline of 8pt Tahoma at 96dpi.
</p>

<p class="initial">
  If you use any images or glyphs in your UI then these need to scale too. A common example would be the glyphs that are used on toolbars and menus. You’ll want to provide these glyphs as icon resources linked to your executable. Each icon should contain a range of sizes and then at runtime you choose the most appropriate size and load it into an image list. Some details on that topic can be found here: How do I load icons from a resource without suffering from aliasing?
</p>

<p class="initial">
  Another useful trick is to define dimensions in relative units, relative to <code>TextWidth</code> or <code>TextHeight</code>. So, if you want something to be around 10 vertical lines in size you can use <code>10*Canvas.TextHeight('Ag')</code>. This is a very rough and ready metric because it doesn’t allow for line spacing and so on. However, often all you need to do is be able to arrange that the GUI scales correctly with  <code>PixelsPerInch</code>.
</p>

<p class="initial">
  You should also mark your application as being high DPI aware. The best way to do this is through the application manifest. Since Delphi’s build tools don’t allow you to customise the manifest you use this forces you to link your own manifest resource.
</p>

<div class="anmerkung"><pre>
&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
  &lt;asmv3:application xmlns:asmv3="urn:schemas-microsoft-com:asm.v3"&gt;
    &lt;asmv3:windowsSettings
         xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings"&gt;
      &lt;dpiAware&gt;true&lt;/dpiAware&gt;
    &lt;/asmv3:windowsSettings&gt;
  &lt;/asmv3:application&gt;
&lt;/assembly&gt;
</pre>
</div>

<p class="initial">
  The resource script looks like this: <code>1 24 "Manifest.txt"</code>
</p>

<p class="initial">
  where Manifest.txt contains the actual manifest. You would also need to include the <code>comctl32 v6</code> section and set <code>requestedExecutionLevel</code> to <code>asInvoker</code>. You then link this compiled resource to your app and make sure that Delphi doesn’t try to do the same with its manifest. In modern Delphi you achieve that by setting the Runtime Themes project option to None.
</p>

<p class="initial">
  The manifest is the right way to declare your app to be high DPI aware. If you just want to try it out quickly without messing with your manifest, call <code>SetProcessDPIAware</code>. Do so as the very first thing you do when your app runs. Preferably in one of the early unit initialization sections, or as the first thing in your .dpr file.
</p>

<p class="initial">
  If you don’t declare your app to be high DPI aware then Vista and up will render it in a legacy mode for any font scaling above 125%. This looks quite dreadful. Try to avoid falling into that trap.
</p>

<h5>Windows 8.1 per monitor DPI update</h5>

<p class="initial">
  As of Windows 8.1, there is now OS support for per-monitor DPI settings (<code>http://msdn.microsoft.com/en-ca/magazine/dn574798.aspx</code>). This is a big issue for modern devices which might have different displays attached with very different capabilities. You might have a very high DPI laptop screen, and a low DPI external projector. Supporting such a scenario takes even more work than described above.
</p>

<p class="initial">
  It’s also important to note that honoring the user’s DPI is only a subset of your real job: honoring the user’s font size
</p>

<p class="initial">
  For decades, Windows has solved this issue with the notion performing layout using Dialog Units, rather than pixels. A <code>dialog unit</code> is defined so that font’s average character is dialog units (dlus) wide, and 8 dialog units (clus) high.
</p>

<p class="initial">
  Delphi does ship with a (buggy) notion of Scaled, where a form tries to automatically adjust based on the Windows DPI settings of the user, verses the DPI setting on the machine of the developer who last saved the form. That doesn’t solve the problem when the user uses a font different from what you designed the form with, e.g.: developer designed the form with MS Sans Serif 8pt (where the average character is 6.21px x 13.00px, at 96dpi), user running with Tahoma 8pt (where the average character is 5.94px x 13.00px, at 96dpi)
</p>

<p class="initial">
  As was the case with anyone developing an application for Windows 2000 or Windows XP. or developer designed the form with **Tahoma 8pt* (where the average character is 5.94px x 13.00px, at 96dpi) a user running with Segoe UI 9pt (where the average character is 6.67px x 15px, at 96dpi)
</p>

<p class="initial">
  As a good developer you are going to honor your user’s font preferences. This means that you also need to scale all controls on your form to match the new font size: expand everything horizontally by 12.29% (6.67/5.94), stretch everything vertically by 15.38% (15/13). Scaled won’t handle this for you.
</p>

<p class="initial">
  It gets worse when: designed your form at Segoe UI 9pt (the Windows Vista, Windows 7, Windows 8 default), user is running Segoe UI 14pt, (e.g. my preference) which is 10.52px x 25px
</p>

<p class="initial">
  Now you have to scale everything: horizontally by 57.72%, vertically by 66.66%. Scaled won’t handle this for you.
</p>

<p class="initial">
  If you’re smart you can see how honoring DPI is irrelavent: form designed with Segoe UI 9pt @ 96dpi (6.67px x 15px), user running with Segoe UI 9pt @ 150dpi (10.52px x 25px).
</p>

<p class="initial">
  You should not be looking at the user’s DPI setting, you should be looking at their font size. Two users, running Segoe UI 14pt @ 96dpi (10.52px x 25px), Segoe UI 9pt @ 150dpi (10.52px x 25px), are running the same font. DPI is just one thing that affects font size; the user’s preferences are the other.
</p>

<h5>StandardizeFormFont</h5>

<p class="initial">
  Clovis noticed that I reference a function <code>StandardizeFormFont</code> that fixes the font on a form, and scales it to the new font size. It’s not a standard function, but an entire set of functions that accomplish the simple task that Borland never handled.
</p>

<div class="anmerkung"><pre>
function StandardizeFormFont(AForm: TForm): Real;
var
    preferredFontName: string;
    preferredFontHeight: Integer;
begin
    GetUserFontPreference({out}preferredFontName, {out}preferredFontHeight);

    //e.g. "Segoe UI",
    Result := Toolkit.StandardizeFormFont(AForm, PreferredFontName, PreferredFontHeight);
end;
</pre></div>

<p class="initial">
  Windows has 6 different fonts; there is no single "font setting" in Windows.
But we know from experience that our forms should follow the Icon Title Font setting
</p>

<div class="anmerkung"><pre>
procedure GetUserFontPreference(out FaceName: string; out PixelHeight: Integer);
var
   font: TFont;
begin
   font := Toolkit.GetIconTitleFont;
   try
      FaceName := font.Name; //e.g. "Segoe UI"

      //Dogfood testing: use a larger font than we’re used to; to force us to actually test it
      if IsDebuggerPresent then
         font.Size := font.Size+1;

      PixelHeight := font.Height; //e.g. -16
   finally
      font.Free;
   end;
end;
</pre></div>

<p class="initial">
  Once we know the font size we will scale the form to, we get the form’s current font height (in pixels), and scale up by that factor. For example, if I am setting the form to -16, and the form is currently at -11, then we need to scale the entire form by: <code>-16 / -11 = 1.45454%</code>
</p>

<p class="initial">
  The standardization happens in two phases. First scale the form by the ratio of the new:old font sizes. Then actually change the controls (recursively) to use the new font.
</p>

<div class="anmerkung"><pre>
function StandardizeFormFont(AForm: TForm; FontName: string; FontHeight: Integer): Real;
var
    oldHeight: Integer;
begin
    Assert(Assigned(AForm));

    if (AForm.Scaled) then
    begin
        OutputDebugString(PChar('WARNING: StandardizeFormFont: Form "'+GetControlName(AForm)
        +'" is set to Scaled. Proper form scaling requires VCL scaling to be'
        + ' disabled, unless you implement scaling by overriding the protected'
        * ' ChangeScale() method of the form.'));
    end;

    if (AForm.AutoScroll) then
    begin
        if AForm.WindowState = wsNormal then
        begin
            OutputDebugString(PChar('WARNING: StandardizeFormFont: Form "'+GetControlName(AForm)
            +'" is set to AutoScroll. Form designed size will be suseptable to '
            + 'changes in Windows form caption height (e.g. 2000 vs XP).'));
                    if IsDebuggerPresent then
                        Windows.DebugBreak; //Some forms would like it (to fix maximizing problem)
        end;
    end;

    if (not AForm.ShowHint) then
    begin
        AForm.ShowHint := True;
        OutputDebugString(PChar('INFORMATION: StandardizeFormFont: Turning on form "'
        +GetControlName(AForm)+'" hints. (ShowHint := True)'));
                    if IsDebuggerPresent then
                        Windows.DebugBreak; //Some forms would like it (to fix maximizing problem)
    end;

    oldHeight := AForm.Font.Height;

    //Scale the form to the new font size
    //  if (FontHeight &lt;&gt; oldHeight) then    For compatibility, it's safer to
    // trigger a call to ChangeScale, since a lot of people will be assuming it always is called
    begin
        ScaleForm(AForm, FontHeight, oldHeight);
    end;

    //Now change all controls to actually use the new font
    Toolkit.StandardizeFont_ControlCore(AForm, g_ForceClearType, FontName, FontHeight,
            AForm.Font.Name, AForm.Font.Size);

    //Return the scaling ratio, so any hard-coded values can be multiplied
    Result := FontHeight / oldHeight;
end;
</pre></div>

<p class="initial">
  Here’s the job of actually scaling a form. It works around bugs in Borland’s own Form.ScaleBy method. First it has to disable all anchors on the form, then perform the scaling, then re-enable the anchors:
</p>

<div class="anmerkung"><pre>
TAnchorsArray = array of TAnchors;

procedure ScaleForm(const AForm: TForm; const M, D: Integer);
var
    aAnchorStorage: TAnchorsArray;
    RectBefore, RectAfter: TRect;
    x, y: Integer;
    monitorInfo: TMonitorInfo;
    workArea: TRect;
begin
    if (M = 0) and (D = 0) then
        Exit;

    RectBefore := AForm.BoundsRect;

    SetLength(aAnchorStorage, 0);
    aAnchorStorage := DisableAnchors(AForm);
    try
        AForm.ScaleBy(M, D);
    finally
        EnableAnchors(AForm, aAnchorStorage);
    end;

    RectAfter := AForm.BoundsRect;

    case AForm.Position of
    poScreenCenter, poDesktopCenter, poMainFormCenter, poOwnerFormCenter,
    poDesigned: //I think I really want everything else to also follow the nudging rules … why did I exclude poDesigned
        begin
            //This was only nudging by one quarter the difference, rather than one half the difference
//          x := RectAfter.Left - ((RectAfter.Right-RectBefore.Right) div 2);
//          y := RectAfter.Top - ((RectAfter.Bottom-RectBefore.Bottom) div 2);
            x := RectAfter.Left - ((RectAfter.Right-RectAfter.Left) - (RectBefore.Right-RectBefore.Left)) div 2;
            y := RectAfter.Top - ((RectAfter.Bottom-RectAfter.Top)-(RectBefore.Bottom-RectBefore.Top)) div 2;
        end;
    else
        //poDesigned, poDefault, poDefaultPosOnly, poDefaultSizeOnly:
        x := RectAfter.Left;
        y := RectAfter.Top;
    end;

    if AForm.Monitor &lt;&gt; nil then
    begin
        monitorInfo.cbSize := SizeOf(monitorInfo);
        if GetMonitorInfo(AForm.Monitor.Handle, @monitorInfo) then
            workArea := monitorInfo.rcWork
        else
        begin
            OutputDebugString(PChar(SysErrorMessage(GetLastError)));
            workArea := Rect(AForm.Monitor.Left, AForm.Monitor.Top, AForm.Monitor.Left
                        +AForm.Monitor.Width, AForm.Monitor.Top+AForm.Monitor.Height);
        end;

//      If the form is off the right or bottom of the screen then we need to pull it back
        if RectAfter.Right > workArea.Right then
            x := workArea.Right - (RectAfter.Right-RectAfter.Left); //rightEdge - widthOfForm

        if RectAfter.Bottom > workArea.Bottom then
            y := workArea.Bottom - (RectAfter.Bottom-RectAfter.Top); //bottomEdge - heightOfForm

        x := Max(x, workArea.Left); //don’t go beyond left edge
        y := Max(y, workArea.Top); //don’t go above top edge
    end
    else
    begin
        x := Max(x, 0); //don’t go beyond left edge
        y := Max(y, 0); //don’t go above top edge
    end;

    AForm.SetBounds(x, y,
            RectAfter.Right-RectAfter.Left, //Width
            RectAfter.Bottom-RectAfter.Top); //Height
end;
</pre></div>

<p class="initial">
  and then we have to recursively actually use the new font:
</p>

<div class="anmerkung"><pre>
procedure StandardizeFont_ControlCore(AControl: TControl; ForceClearType: Boolean;
        FontName: string; FontSize: Integer;
        ForceFontIfName: string; ForceFontIfSize: Integer);
const
    CLEARTYPE_QUALITY = 5;
var
    i: Integer;
    RunComponent: TComponent;
    AControlFont: TFont;
begin
    if not Assigned(AControl) then
        Exit;

    if (AControl is TStatusBar) then
    begin
        TStatusBar(AControl).UseSystemFont := False; //force …
        TStatusBar(AControl).UseSystemFont := True;  //… it
    end
    else
    begin
        AControlFont := Toolkit.GetControlFont(AControl);

        if not Assigned(AControlFont) then
            Exit;

        StandardizeFont_ControlFontCore(AControlFont, ForceClearType,
                FontName, FontSize,
                ForceFontIfName, ForceFontIfSize);
    end;

{   If a panel has a toolbar on it, the toolbar won’t paint properly. So this idea won’t work.
    if (not Toolkit.IsRemoteSession) and (AControl is TWinControl) and (not (AControl is TToolBar)) then
        TWinControl(AControl).DoubleBuffered := True;
}

    //Iterate children
    for i := 0 to AControl.ComponentCount-1 do
    begin
        RunComponent := AControl.Components[i];
        if RunComponent is TControl then
            StandardizeFont_ControlCore(
                    TControl(RunComponent), ForceClearType,
                    FontName, FontSize,
                    ForceFontIfName, ForceFontIfSize);
    end;
end;
</pre></div>

<p class="initial">
  With the anchors being recursively disabled:
</p>

<div class="anmerkung"><pre>
function DisableAnchors(ParentControl: TWinControl): TAnchorsArray;
var
    StartingIndex: Integer;
begin
    StartingIndex := 0;
    DisableAnchors_Core(ParentControl, Result, StartingIndex);
end;


procedure DisableAnchors_Core(ParentControl: TWinControl; var aAnchorStorage: TAnchorsArray; var StartingIndex: Integer);
var
    iCounter: integer;
    ChildControl: TControl;
begin
    if (StartingIndex+ParentControl.ControlCount+1) > (Length(aAnchorStorage)) then
        SetLength(aAnchorStorage, StartingIndex+ParentControl.ControlCount+1);

    for iCounter := 0 to ParentControl.ControlCount - 1 do
    begin
        ChildControl := ParentControl.Controls[iCounter];
        aAnchorStorage[StartingIndex] := ChildControl.Anchors;

        //doesn’t work for set of stacked top-aligned panels
//      if ([akRight, akBottom ] * ChildControl.Anchors) &lt;&gt; [] then
//          ChildControl.Anchors := [akLeft, akTop];

        if (ChildControl.Anchors) &lt;&gt; [akTop, akLeft] then
            ChildControl.Anchors := [akLeft, akTop];

//      if ([akTop, akBottom] * ChildControl.Anchors) = [akTop, akBottom] then
//          ChildControl.Anchors := ChildControl.Anchors - [akBottom];

        Inc(StartingIndex);
    end;

    //Add children
    for iCounter := 0 to ParentControl.ControlCount - 1 do
    begin
        ChildControl := ParentControl.Controls[iCounter];
        if ChildControl is TWinControl then
            DisableAnchors_Core(TWinControl(ChildControl), aAnchorStorage, StartingIndex);
    end;
end;
</pre></div>

<p class="initial">
  And anchors being recursively re-enabled:
</p>

<div class="anmerkung"><pre>
procedure EnableAnchors(ParentControl: TWinControl; aAnchorStorage: TAnchorsArray);
var
    StartingIndex: Integer;
begin
    StartingIndex := 0;
    EnableAnchors_Core(ParentControl, aAnchorStorage, StartingIndex);
end;


procedure EnableAnchors_Core(ParentControl: TWinControl; aAnchorStorage: TAnchorsArray; var StartingIndex: Integer);
var
    iCounter: integer;
    ChildControl: TControl;
begin
    for iCounter := 0 to ParentControl.ControlCount - 1 do
    begin
        ChildControl := ParentControl.Controls[iCounter];
        ChildControl.Anchors := aAnchorStorage[StartingIndex];

        Inc(StartingIndex);
    end;

    //Restore children
    for iCounter := 0 to ParentControl.ControlCount - 1 do
    begin
        ChildControl := ParentControl.Controls[iCounter];
        if ChildControl is TWinControl then
            EnableAnchors_Core(TWinControl(ChildControl), aAnchorStorage, StartingIndex);
    end;
end;
</pre></div>

<p class="initial">
  With the work of actually changing a controls font left to:
</p>

<div class="anmerkung"><pre>
procedure StandardizeFont_ControlFontCore(AControlFont: TFont; ForceClearType: Boolean;
        FontName: string; FontSize: Integer;
        ForceFontIfName: string; ForceFontIfSize: Integer);
const
    CLEARTYPE_QUALITY = 5;
var
    CanChangeName: Boolean;
    CanChangeSize: Boolean;
    lf: TLogFont;
begin
    if not Assigned(AControlFont) then
        Exit;

{$IFDEF ForceClearType}
    ForceClearType := True;
{$ELSE}
    if g_ForceClearType then
        ForceClearType := True;
{$ENDIF}

    //Standardize the font if it’s currently
    //  "MS Shell Dlg 2" (meaning whoever it was opted into the 'change me' system
    //  "MS Sans Serif" (the Delphi default)
    //  "Tahoma" (when they wanted to match the OS, but "MS Shell Dlg 2" should have been used)
    //  "MS Shell Dlg" (the 9x name)
    CanChangeName :=
            (FontName &lt;&gt; '')
            and
            (AControlFont.Name &lt;&gt; FontName)
            and
            (
                (
                    (ForceFontIfName &lt;&gt; '')
                    and
                    (AControlFont.Name = ForceFontIfName)
                )
                or
                (
                    (ForceFontIfName = '')
                    and
                    (
                        (AControlFont.Name = 'MS Sans Serif') or
                        (AControlFont.Name = 'Tahoma') or
                        (AControlFont.Name = 'MS Shell Dlg 2') or
                        (AControlFont.Name = 'MS Shell Dlg')
                    )
                )
            );

    CanChangeSize :=
            (
                //there is a font size
                (FontSize &lt;&gt; 0)
                and
                (
                    //the font is at it’s default size, or we’re specifying what it’s default size is
                    (AControlFont.Size = 8)
                    or
                    ((ForceFontIfSize &lt;&gt; 0) and (AControlFont.Size = ForceFontIfSize))
                )
                and
                //the font size (or height) is not equal
                (
                    //negative for height (px)
                    ((FontSize &lt; 0) and (AControlFont.Height &lt;&gt; FontSize))
                    or
                    //positive for size (pt)
                    ((FontSize > 0) and (AControlFont.Size &lt;&gt; FontSize))
                )
                and
                //no point in using default font’s size if they’re not using the face
                (
                    (AControlFont.Name = FontName)
                    or
                    CanChangeName
                )
            );

    if CanChangeName or CanChangeSize or ForceClearType then
    begin
        if GetObject(AControlFont.Handle, SizeOf(TLogFont), @lf) &lt;&gt; 0 then
        begin
            //Change the font attributes and put it back
            if CanChangeName then
                StrPLCopy(Addr(lf.lfFaceName[0]), FontName, LF_FACESIZE);
            if CanChangeSize then
                lf.lfHeight := FontSize;

            if ForceClearType then
                lf.lfQuality := CLEARTYPE_QUALITY;
            AControlFont.Handle := CreateFontIndirect(lf);
        end
        else
        begin
            if CanChangeName then
                AControlFont.Name := FontName;
            if CanChangeSize then
            begin
                if FontSize > 0 then
                    AControlFont.Size := FontSize
                else if FontSize &lt; 0 then
                    AControlFont.Height := FontSize;
            end;
        end;
    end;
end;
</pre>
</div>

<p class="initial">
  That’s a whole lot more code than you thought it was going to be; I know. The sad thing is that there is no Delphi developer on earth, except for me, who actually makes their applications correct.
</p>

<p class="initial">
  Dear Delphi Developer: Set your Windows font to Segoe UI 14pt, and fix your buggy application
</p>

<p class="vorsatz">
  Note: Any code is released into the public domain. No attribution required.
</p>

<p class="initial">
  I call <code>StandardizeFormFont(Self)</code> pretty much as the first thing in the form’s <code>OnCreate</code> handler. You should then also override the protected procedure <code>ChangeScale(M, D: Integer)</code>; and apply your scaling and repositioning of items there. Inside <code>ChangeScale</code> is where I keep a running <code>FCurrentScaleFactor := FCurrentScaleFactor * M/D</code> so I always know my current runtime scaling. If you ever try to position things with hard-coded pixel values, you should actually be doing something like <code>Button1.Top := Round(Self.Top + 16*FCurrentScaleFactor)</code>; so you’re not using hard-coded pixels.
</p>

<p class="verfasser">
  Ian Boyd, 2014 05 30, 21:26
</p>

</article>

<footer>
  <div id="lastchanged">
    Zuletzt geändert am:
    <br />
    <time>
      08. Februar 2020
    </time>
  </div>
</footer>

</body>
</html>
